option(LEXER_LOGGING "verbose output (useful for debugging)" OFF)
option(LEXER_SANITIZE "Sanitize addresses" OFF)
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  option(LEXER_SANITIZE_BOUNDS_STRICT "Sanitize bounds (strict): only for GCC" OFF)
endif()
option(LEXER_SANITIZE_UNDEFINED "Sanitize undefined behaviour" OFF)
if(LEXER_SANITIZE)
  message(STATUS "Address sanitizer enabled.")
endif()
if(LEXER_SANITIZE_UNDEFINED)
  message(STATUS "Undefined sanitizer enabled.")
endif()

if (NOT CMAKE_BUILD_TYPE)
  if(LEXER_SANITIZE OR LEXER_SANITIZE_BOUNDS_STRICT OR LEXER_SANITIZE_UNDEFINED)
    message(STATUS "No build type selected, default to Debug because you have sanitizers.")
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build." FORCE)
  else()
    message(STATUS "No build type selected, default to Release")
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
  endif()
endif()

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/tools/cmake")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  message(STATUS "Ccache found using it as compiler launcher.")
  set(CMAKE_C_COMPILER_LAUNCHER ccache)
  set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
endif(CCACHE_FOUND)
